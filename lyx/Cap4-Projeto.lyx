#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extbook
\begin_preamble
\usepackage {graphicx}
\usepackage {longtable}
\usepackage {indentfirst}
\renewenvironment{center}{\par\centering}{\par}

% Comentar linhas abaixo se não estiver usando pacote abntex
% ou se o pacote ainda não foi instalado.
% neste caso sugere-se usar citações no padrão apalike (lembra o da anbt).
%\usepackage[alf ,abnt-etal-cite=2 , abnt-year-extra-label=yes , abnt-etal-list=0]{abntcite}
%\usepackage {helvet}
%\renewcommand {\familydefault}{\sfdefault}

% Para uso de listagens de código
\usepackage{color}
\definecolor{azulclaro}{rgb}{0.6,1,1}%   rgb color model
% Informa que vai usar o pacote listings, 
% disponibilizado em /usr/share/texmf/doc/latex/styles/listings.dvi
\usepackage{listings}
\end_preamble
\use_default_options false
\master DocumentoMestre-Trabalho-ProgramacaoPratica.lyx
\maintain_unincluded_children false
\language brazilian
\language_package auto
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement p
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Índice
\shortcut idx
\color #008000
\end_index
\paperwidth 210mm
\paperheight 297mm
\leftmargin 30mm
\topmargin 25mm
\rightmargin 20mm
\bottommargin 20mm
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Projeto 
\begin_inset CommandInset label
LatexCommand label
name "chap:Projeto-do-Sistema"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lhead{
\backslash
thechapter - Projeto} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Neste capítulo do projeto de engenharia veremos questões associadas ao projeto
 do sistema, incluindo protocolos, recursos, plataformas suportadas, implicações
 nos diagramas feitos anteriormente, diagramas de componentes e implantação.
 Na segunda parte revisamos os diagramas levando em conta as decisões do
 projeto do sistema.
\end_layout

\begin_layout Section
Projeto do sistema
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Projeto do sistema
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Projeto-do-sistema"

\end_inset


\end_layout

\begin_layout Standard
Depois da análise orientada a objeto desenvolve-se o projeto do sistema,
 o qual envolve etapas como definição dos protocolos, interface API, uso
 de recursos, subdivisão do sistema em subsistemas, alocação dos subsistemas
 ao hardware, seleção das estruturas de controle, seleção das plataformas
 do sistema, das bibliotecas externas, dos padrões de projeto, além da tomada
 de decisões conceituais e políticas que formam a infraestrutura do projeto.
\end_layout

\begin_layout Standard
A importância de se definir padrões específicos de documentação, nome das
 classes, padrões de retorno, interface do usuário e características de
 desempenho constitui-se como uma ferramenta estratégica para resolver o
 problema, elaborar uma solução e garantir repetibilidade e expansão para
 problemas similares.
\end_layout

\begin_layout Standard
Nessa etapa serão avaliadas algumas características do 
\shape italic
software
\shape default
 tais como:
\end_layout

\begin_layout Enumerate
Protocolos:
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Protocolos
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
O programa permite salvar dados em disco no formato aberto, como .txt.
\end_layout

\begin_layout Itemize
Será efetuada a entrada de dados via arquivo de texto .txt.
\end_layout

\begin_layout Itemize
Neste projeto o software irá se comunicar com o componente externo Gnuplot
 que gera gráficos.
\end_layout

\end_deeper
\begin_layout Enumerate
Recursos:
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Recursos
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
O programa utilizará uma máquina computacional com HD, CPU, RAM, periféricos,
 processador, teclado para a entrada de dados e o monitor para a saída de
 dados.
\end_layout

\begin_layout Itemize
O simulador utiliza o programa externo Gnuplot que plota figuras e gráficos.
\end_layout

\end_deeper
\begin_layout Enumerate
Controle:
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Controle
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Este software requer um controle sequencial.
\end_layout

\end_deeper
\begin_layout Enumerate
Plataformas:
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Plataformas
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
O programa é multiplataforma, o que permite executá-lo em Windows e Mac
 OS X , mas será desenvolvido na plataforma Windows.
 A linguagem de software utilizada é a C++ orientada a objeto.
\end_layout

\begin_layout Itemize
Ambiente de desenvolvimento Microsoft Visual C ++ ( MSVC ).
 Um editor de códigos e compilador de diversas linguagens de programação
 como python, C, C++, C#, desenvolvido pela Microsoft .
 MSVC é um software proprietário.
 Originalmente um produto autônomo que mais tarde tornou-se parte do Visual
 Studio e foi disponibilizado em versões de teste e 
\shape italic
freeware
\shape default
.
 Ele apresenta ferramentas para desenvolver e depurar código C ++, especialmente
 código escrito para a API do Windows , DirectX e .NET.
\end_layout

\begin_layout Itemize
O software utilizara a biblioteca externa CGnuplot que permite acesso ao
 programa Gnuplot.
 É um utilitário portátil de gráfico baseado em linha de comando para Linux,
 OS / 2, MS Windows, OSX, VMS e muitas outras plataformas.
 O código-fonte é protegido por direitos autorais, mas é distribuído gratuitamen
te.
\end_layout

\end_deeper
\begin_layout Enumerate
Padrões de projeto:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Não se aplica para esse caso já que o software foi feito para cunho acadêmico
 e não empresarial.
\end_layout

\end_deeper
\begin_layout Section
Projeto orientado a objeto – POO
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
POO
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Projeto orientado a objeto
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Projeto-orientado-a-objeto"

\end_inset


\end_layout

\begin_layout Standard
O projeto orientado a objeto é a etapa posterior ao projeto do sistema.
 Baseia-se na análise, mas considera as decisões do projeto do sistema.
 Acrescenta a análise desenvolvida e as características da plataforma escolhida
 (hardware, sistema operacional e linguagem de software).
 Passa pelo maior detalhamento do funcionamento do software, acrescentando
 atributos e métodos que envolvem a solução de problemas específicos não
 identificados durante a análise.
 Além disso, envolve a otimização da estrutura de dados e dos algoritmos,
 a minimização do tempo de execução, de memória e de custos.
 
\end_layout

\begin_layout Standard
Exemplo: na análise você define que existe um método para salvar um arquivo
 em disco, define um atributo nomeDoArquivo, mas não se preocupa com detalhes
 específicos da linguagem.
 Já no projeto, você inclui as bibliotecas necessárias para acesso ao disco,
 cria um objeto específico para acessar o disco, podendo, portanto, acrescentar
 novas classes àquelas desenvolvidas na análise.
 
\end_layout

\begin_layout Subsubsection
Efeitos do projeto no modelo
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
modelo
\end_layout

\end_inset

 estrutural
\begin_inset CommandInset label
LatexCommand label
name "subsec:Efeito-do-projeto-no-modelo-estrutural"

\end_inset


\end_layout

\begin_layout Itemize
O programa utiliza o HD, o processador e o teclado do computador.
\end_layout

\begin_layout Itemize
O Software pode ser executado nas plataformas GNU/Linux ou Windows.
\end_layout

\begin_layout Itemize
Existe a necessidade de instalação do software Gnuplot para o funcionamento
 do programa.
\end_layout

\begin_layout Itemize
O código possui comentários com explicações dos algoritmos a serem executados.
\end_layout

\begin_layout Itemize
Neste projeto foi feita uma associação entre a biblioteca CGnuplot com as
 classes CSimuladorMonofasico2D, que por sua vez associa-se com as classes
 CReservoir, CDiscretization, CGrid, CWell, CProps, CFluido, que se associam
 com CGas e CLiquido
\end_layout

\begin_layout Subsubsection
Efeitos do projeto no modelo
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
modelo
\end_layout

\end_inset

 dinâmico
\begin_inset CommandInset label
LatexCommand label
name "subsec:Efeito-do-projeto-no-modelo-dinamico"

\end_inset


\end_layout

\begin_layout Itemize
Não foi realizada nessa etapa do projeto uma vez que os diagramas de sequência,
 de comunicação, máquina de estado e de atividades serão modicados durante
 o desenvolvimento do código caso seja necessário.
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nos atributos
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
atributos
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "subsec:Efeito-do-projeto-nos-atributos"

\end_inset


\end_layout

\begin_layout Itemize
Como alguns atributos necessitavam de constante atualização, foi implementado
 uma função chamada update, que a cada passa de tempo, recalculava as propriedad
es do sistema reservatório e poço.
\end_layout

\begin_layout Itemize
As relações entre classes foram melhoradas e adaptadas em relação à herança
 entre CFluido com CGas e CLiquido.
 Basicamente, foi necessário melhor especificar com base nos atributos inerentes
 de cada uma delas.
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nos métodos
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
métodos
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Efeitos do projeto nos métodos
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Em virtude de usar leitura de disco, um método de inserção de dados através
 do teclado foi adicionado.
 
\end_layout

\begin_layout Itemize
A razão da existência do método Run() presente em CSimuladorMonofasico2D
 se explica pela intenção em deixar o código mais enxuto e pela intenção
 de agrupar algoritmos de mesma natureza em um só método.
 Ele é chamado e governa toda a execução do código.
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nas heranças
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
heranças
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Efeitos do projeto nas heranças
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Heranças
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Sempre que um ou mais atributos e métodos se repetiam, foi necessário reavaliar
 o código.
 Desse modo, o item de ação voltou-se para o diagrama de classes que foi
 reformulado algumas vezes em subdivisões de classes e criação de novas
 classes.
\end_layout

\begin_layout Itemize
Algumas heranças puderam ser excluídas do diagrama, uma vez que alguns atributos
 necessários inicialmente puderam ser passados através da chamada das funções/mé
todos de classes com relações de herança.
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nas associações
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Efeitos do projeto nas associações
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Associações
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Algumas heranças foram trocadas por associações e novas associações foram
 criadas para relacionamento com novas classes.
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nas otimizações
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
otimizações
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Logo no início optou-se por pedir todas as informações ao usuário juntas.
\end_layout

\begin_layout Itemize
O software tem opção de parada para mudança de valores e depois retomada.
\end_layout

\begin_layout Itemize
Pode ser otimizado pela implementação de processamento paralelo a fim de
 utilizar melhor a capacidade de processamento da máquina.
\end_layout

\begin_layout Itemize
Possibilidade de inclusão de bibliotecas otimizadas para resolução do Método
 de Newton-Raphson e sistema linear.
\end_layout

\begin_layout Itemize
A Classe CProps foi criada para reunir alguns atributos que estavam presentes
 na maioria dos cálculos e que necessitavam de atualizações constantes.
 Por conta disso eles foram retirados das respectivas classes e implementados
 em outra.
\end_layout

\begin_layout Standard
\begin_inset VSpace 1cm
\end_inset


\end_layout

\begin_layout Standard
As dependências dos arquivos e bibliotecas podem ser descritos pelo diagrama
 de componentes, e as relações e dependências entre o sistema e o hardware
 podem ser ilustradas com o diagrama de implantação.
\end_layout

\begin_layout Section
Diagrama de componentes
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Diagrama de componentes
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Diagrama-de-componentes"

\end_inset


\end_layout

\begin_layout Standard
O diagrama de componentes mostra a forma como os componentes do software
 se relacionam, suas dependências.
 Inclui itens como: componentes, subsistemas, executáveis, nós, associações,
 dependências, generalizações, restrições e notas.
 Exemplos de componentes são bibliotecas estáticas, bibliotecas dinâmicas,
 dlls, componentes Java, executáveis, arquivos de disco, código-fonte.
 
\end_layout

\begin_layout Standard
Veja na Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "cap:Diagrama-de-componentes"

\end_inset

 um exemplo de diagrama de componentes.
 De posse do diagrama de componentes, temos a lista de todos os arquivos
 necessários para compilar e rodar o software.
 Por ele, podemos perceber as dependências de cada componente.
 Por exemplo, o componente CSimuladorMonofasico2D depende de todos outros
 para funcionar.
 E por sua vez, o CFluido para funcionar, depende do CGas ou CLiquido.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/Usuario/Desktop/ProgramacaoPratica2021/ProjetoEngenharia-Simulador2D-Nicholas-Kevin/imagens/Diagrama_Componente.eps
	lyxscale 70
	scale 85

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Diagrama de componentes
\begin_inset CommandInset label
LatexCommand label
name "cap:Diagrama-de-componentes"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Diagrama de implantação
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Diagrama de execução
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Diagrama-de-execução"

\end_inset


\end_layout

\begin_layout Standard
O diagrama de implantação é um diagrama de alto nível que inclui relações
 entre o sistema e o hardware e que se preocupa com os aspectos da arquitetura
 computacional escolhida.
 Seu enfoque é o hardware, a configuração dos nós em tempo de execução.
 Este deve incluir os elementos necessários para que o sistema seja colocado
 em funcionamento: computador, periféricos, processadores, dispositivos,
 nós, relacionamentos de dependência, associação, componentes, subsistemas,
 restrições e notas.
\end_layout

\begin_layout Standard
Veja na Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "cap:Diagrama-de-implantação."

\end_inset

 um exemplo de diagrama de implantação utilizado.
 Para que haja um correto e realístico desempenho da simulação pelo software,
 é necessário que haja o computador com todos os hardwares requeridos (CPU,
 RAM, HD) e uma fonte de dados como dados do poço e dados de reservatório.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/Usuario/Desktop/ProgramacaoPratica2021/ProjetoEngenharia-Simulador2D-Nicholas-Kevin/imagens/Diagrama_Implantacao.eps
	lyxscale 70
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Diagrama de implantação
\begin_inset CommandInset label
LatexCommand label
name "cap:Diagrama-de-implantação."

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
